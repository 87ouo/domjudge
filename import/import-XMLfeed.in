#!/usr/bin/env php
<?php
/**
 * @configure_input@
 *
 * Parses a CCS event feed and imports submissions from another
 * contest system by downloading them through a minimal submission
 * source JSON REST API.
 *
 * Part of the DOMjudge Programming Contest Jury System and licenced
 * under the GNU GPL. See README and COPYING for details.
 */
if ( isset($_SERVER['REMOTE_ADDR']) ) die ("Commandline use only");

require('@domserver_etcdir@/domserver-static.php');
require(ETCDIR . '/domserver-config.php');

define('SCRIPT_ID', 'import-XMLfeed');
define('LOGFILE', LOGDIR.'/import.log');

require(LIBDIR . '/init.php');

require(LIBEXTDIR . '/spyc/spyc.php');

setup_database_connection();

$verbose = LOG_NOTICE;
$waittime = 5;

$cdata = getCurContest(TRUE);
$cid = $cdata['cid'];

$config = spyc_load_file(ETCDIR . '/import-forwardfeed.yaml');

$resturl = $config['restapi']['url'];
$restuser = @$config['restapi']['user'];
$restpass = @$config['restapi']['pass'];

$feedurl = $config['feedurl'];

function request($url, $verb = 'GET', $data = '') {
	global $resturl, $restuser, $restpass;

	$url = $resturl . "/" . $url;
	if ( $verb == 'GET' ) {
		$url .= '?' . $data;
	}

	$ch = curl_init($url);
	curl_setopt($ch, CURLOPT_USERAGENT, "DOMjudge/" . DOMJUDGE_VERSION);
	curl_setopt($ch, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
	curl_setopt($ch, CURLOPT_USERPWD, $restuser . ":" . $restpass);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
	if ( $verb == 'POST' ) {
		curl_setopt($ch, CURLOPT_POST, TRUE);
		if ( is_array($data) ) {
			curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: multipart/form-data'));
		}
	} else if ( $verb == 'PUT' || $verb == 'DELETE' ) {
		curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $verb);
	}
	if ( $verb == 'POST' || $verb == 'PUT' ) {
		curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
	}

	$response = curl_exec($ch);
	if ( !$response ) {
		error("Error while executing curl with url " . $url . ": " . curl_error($ch));
	}
	$status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
	if ( $status < 200 || $status >= 300 ) {
		error("Error while executing curl with url " . $url .
		      ": http status code: " . $status . ", response: " . $response);
	}

	curl_close($ch);
	return $response;
}

/**
 * Decode a json encoded string and handle errors.
 */
function dj_json_decode($str) {
	$res = json_decode($str, TRUE);
	if ( $res === NULL ) {
		error("Error retrieving API data. API gave us: " . $str);
	}
	return $res;
}


logmsg(LOG_NOTICE, "XML feed import started [DOMjudge/".DOMJUDGE_VERSION."]");

initsignals();

function remap($type, $id)
{
	global $config;
	if ( empty($config['remapping'][$type][$id]) ) return $id;

	return $config['remapping'][$type][$id];
}

function val($node, $tag) {
	return $node->getElementsByTagName($tag)->item(0)->nodeValue;
}

function stderr($msg) {
	file_put_contents('php://stderr', $msg);
}

// First check if we have the right contest, teams, problems, and
// languages loaded.
`mv $feedurl $feedurl.mine.xml`;
$feedXML = file_get_contents($feedurl . '.mine.xml');
$feedDOM = DOMDocument::loadXML($feedXML);
if ( $feedDOM == NULL ) error("Could not read XML feed from '$feedurl'.");

$contest = $feedDOM->getElementsByTagName('/contest/info');
sscanf(val($contest,'length'),"%d:%d:%d",$h,$m,$s);
$length = 3600*$h + 60*$m + $s;
if ( difftime(val($contest,'starttime'),$cdata['starttime'])!=0 ||
     $length!=difftime($cdata['endtime'],$cdata['starttime']) ) {
	error("Contest times do not match with external CCS data.");
}

$problems = $feedDOM->getElementsByTagName('/contest/problem');
foreach ( $problems as $prob ) {

	$id = $DB->q('MAYBEVALUE SELECT probid FROM problem
	              WHERE probid = %s AND cid = %i AND allow_submit = 1',
	             remap('problem',val($prob,'id')), $cid);

	if ( empty($id) ) {
		error("Problem ID '".val($prob,'id')."' from external CCS not available locally.");
	}
}

$languages = $feedDOM->getElementsByTagName('/contest/language');
foreach ( $languages as $lang ) {

	$id = $DB->q('MAYBEVALUE SELECT langid FROM language
	              WHERE langid = %s AND allow_submit = 1',
	             remap('language',val($lang,'id')));

	if ( empty($id) ) {
		error("Language ID '".val($lang,'id')."' from external CCS not available locally.");
	}
}

$teams = $feedDOM->getElementsByTagName('/contest/team');
foreach ( $teams as $team ) {

	$id = $DB->q('MAYBEVALUE SELECT login FROM team
	              WHERE login = %s AND enabled = 1',
	             remap('team',val($team,'id')));

	if ( empty($id) ) {
		error("Team ID '".val($team,'id')."' from external CCS not available locally.");
	}
}

// Constantly check XML feed for new submissions and judgings
while ( TRUE ) {

	// Check whether we have received an exit signal
	if ( function_exists('pcntl_signal_dispatch') ) pcntl_signal_dispatch();
	if ( $exitsignalled ) {
		logmsg(LOG_NOTICE, "Received signal, exiting.");
		exit;
	}

	if ( !is_readable("testfeed.xml") ) {
		stderr(".\n");
		continue;
	}
	`mv $feedurl $feedurl.mine.xml`;
	$feedXML = file_get_contents($feedurl . '.mine.xml');
	$feedDOM = DOMDocument::loadXML($feedXML);
	if ( $feedDOM == NULL ) continue;
	$runs = $feedDOM->getElementsByTagName('run');

	foreach ( $runs as $run ) {

		$id = val($run, 'id');

		$res = $DB->q('MAYBETUPLE SELECT submitid, teamid, probid, langid, submittime
		               FROM submission WHERE externalid = %i', $id);

		if ( !empty($res) ) {
			if ( $res['teamid']!=remap('team',$subm['team']) ||
			     $res['probid']!=remap('problem',$subm['problem']) ||
			     $res['langid']!=remap('language',$subm['language']) ||
			     ($res['submittime']!=$subm['time'] && val($run, 'judged')!=='True') ) {
				error("External submission '".$subm['id']."' already exists as s".
				      $res['submitid']." with non-matching data.");
			}
			logmsg(LOG_DEBUG,"Skipping re-import of submission '".
			       $id."' (s".$res['submitid'].")");
			continue;
		}


		if ( val($run, 'judged')!=='True' ) {
			// We're inserting a new submission
			$res = dj_json_decode(request('submission_files','GET','id='.$subm['id']));

			$files = array();
			$filenames = array();

			foreach ( $res as $f ) {
				$filenames[] = $f['filename'];
				if ( !($tmpfname = mkstemps(TMPDIR."/import_feed-XXXXXX",0)) ) {
					error("Could not create temporary file.");
				}
				file_put_contents($tmpfname, base64_decode($f['content']));
				$files[] = $tmpfname;
			}
			// FIXME: put 'mainclass' file at front of list?

			$id = submit_solution(remap('team',    val($run,'team')),
			                      remap('problem', val($run,'problem')),
			                      remap('language',val($run,'language')),
			                      $files, $filenames, NULL,
			                      $id, val($run, 'timestamp'));

			logmsg(LOG_INFO,"Imported submission '".$subm['id']."' as s$id");

			foreach ( $files as $file ) unlink($file);

		} else {
			// We're inserting a new judging

			$DB->q('UPDATE submission SET externalresult = %s
			        WHERE externalid = %i',
			       remap('result',val($run,'result')), $id);

			logmsg(LOG_INFO, "Updated external result for s".$id.
			       " to '".remap('result',val($run,'result'))."'");
		}
	}

	sleep($waittime);
}
