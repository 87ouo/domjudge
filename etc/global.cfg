# Global config file for system-wide configuration options
# $Id$

#########################################################################
# This file contains (almost) all configuration options of the DOMjudge
# jury system. Make changes here and then run 'make config' in this or
# the above directory to generate all language specific configuration
# files from this global configuration file and the language specific
# templates.
#
# Note that there might be some specific configuration options in the
# templates and also some things you might want to change in the compiler
# scripts in judge/compile_<lang>.sh and the submission copy script in
# submit/submit_copy.sh. See those scripts for more information.
#########################################################################

#########################################################################
# This file has the following syntax:
#
# Lines with only whitespace or starting with '#' are ignored.
# Declaration of configuration entries is as follows:
#
# VARNAME[ATTRIBUTES]=VALUE
#   or
# VARNAME=VALUE
#
# Where VARNAME must consist entirely of (upper- or lowercase)
# letters, digits and underscores, so [A-Za-z0-9_] and the first
# character must be a letter.
#
# VALUE can be anything, including whitespace: all characters will be
# included in VALUE from '=' until end of line.
#
# ATTRIBUTES is a comma-separated list of keywords, which can be one
# or more of the following:
#
# eval          Evaluate VALUE as a bash-shell expression. All previously
#               defined variables will be available as bash variables.
# string        Treat VALUE as a string expression, enclosing it in quotes
#               where necessary.
#########################################################################

# The version number for this release of DOMjudge. Do not change.
DOMJUDGE_VERSION[string]=2.1.1

# These values are defaults, change to your specific needs:


###########################
# Paths within the system #
###########################

# Root paths for various parts of the system
ROOT_BASE[eval,string]=$HOME
SYSTEM_ROOT[eval,string]=$ROOT_BASE/system
OUTPUT_ROOT[eval,string]=$ROOT_BASE/output
INPUT_ROOT[eval,string]=$ROOT_BASE/input

# Paths within OUTPUT_ROOT
INCOMINGDIR[eval,string]=$OUTPUT_ROOT/incoming
SUBMITDIR[eval,string]=$OUTPUT_ROOT/sources
JUDGEDIR[eval,string]=$OUTPUT_ROOT/judging
LOGDIR[eval,string]=$OUTPUT_ROOT/log

# Absolute path prefix within which chroot is allowed
CHROOT_PREFIX[eval,string]=$JUDGEDIR


#############################
# Hosts and server settings #
#############################

# Hostnames for different servers of the system.
# These can be all the same or different machines.

# Host of the webserver on which the team and jury interface runs
WEBSERVER[eval,string]=domjudge.example.com
# Base URI of the webinterface. Defaults to http://WEBSERVER/ but can
# be changed e.g. when running in a subdir, at a https-site or different
# server port.
# Always end this with a slash!
WEBBASEURI[eval,string]=http://$WEBSERVER/

# TCP port and host on which submitdaemon listens
SUBMITSERVER[eval,string]=$WEBSERVER
SUBMITPORT=9147

# Host on which the MySQL database runs and name of MySQL database
DBSERVER[eval,string]=$WEBSERVER
DBNAME[string]=domjudge

# Host to use when copying submission files (with scp)
SCP_HOST[string]=localhost


###############################
# Restrictions during testing #
###############################

# User under which to run solutions (ID or name)
RUNUSER[string]=domjudge-run

# Users under which programs are allowed to run with runguard:
# Be careful supplying users here as it might introduce a security
# vulnerability which allows anyone with access to the runguard
# binary to run processes as the specified user.
# Must be a comma-separated string of ID's and/or names.
VALID_USERS[eval,string]=$RUNUSER

# Run solutions in a chroot environment? (gives better security)
USE_CHROOT=1

# Optional script to run for creating/destroying chroot environment,
# leave empty to disable. The default script can be used to support
# Sun Java with a chroot (edit the script first!).
#CHROOT_SCRIPT[eval,string]=$SYSTEM_ROOT/judge/chroot-startstop.sh
CHROOT_SCRIPT[eval,string]=

# Maximum seconds available for compiling
COMPILETIME=30

# Maximum size of solution source code in kB
# This must not be greater than the submission.sourcecode field
# in the database (normally MEDIUMBLOB = 16MB)
SOURCESIZE=256

# Maximum memory usage by RUNUSER in kB
# This includes the bash-shell which starts the compiled solution and 
# also any interpreter like Sun 'java', which takes 200MB away!
MEMLIMIT=524288

# Maximum filesize RUNUSER may write in kB
# This should be greater than the maximum testdata output, otherwise
# solutions will abort before writing the complete correct output!!
FILELIMIT=4096

# Maximum no. processes running as RUNUSER
PROCLIMIT=8


#################
# Submit system #
#################

# Enable commandline submit server (default: yes)
# If disabled and libcurl is available at compiletime, teams can still
# use the commandline submit program to submit to the webinterface.
ENABLE_CMDSUBMIT_SERVER=1

# Enable websubmit (default: yes)
# Check that the webserver has write access to INCOMINGDIR!
ENABLE_WEBSUBMIT_SERVER=1

# Default submission method of the commandline submit client.
# Choose 1 for default submission via submit server, 2 for to the
# webinterface. If 0, then the submit client will not be built.
SUBMITCLIENT_METHOD=1

# Directory where the submit client puts files for sending (relative
# to $HOME)
USERSUBMITDIR[string]=.submit

# Permissions for files and directories created by the submit client
# on team accounts
USERPERMFILE=0600
USERPERMDIR=0700

# Submit client warn users when submission file modifications are
# older than specified here (in minutes)
WARN_MTIME=5

# Strict checking of team's IP addresses.
# The commandline submitdaemon can optionally check for correct source
# IP of teams (additionally to the security of "callback" via scp, see
# README on security).
# Set this to 0 to allow automatic updating during submission of IP
# addresses of teams that have their address unset. Otherwise these
# addresses have to be configured beforehand.
STRICTIPCHECK=0


########################
# Webinterface options #
########################

# Jury verification of submissions.
# This determines whether the jury must verify the automatic judgings
# of the DOMjudge system for the verdicts to become valid.
# Required verification can also be turned on per problem/language in
# the jury webinterface (e.g. for rejudging a corrected problem).
VERIFICATION_REQUIRED=0

# Show compile output in team webinterface.
# Note that this might give teams the possibility to gain information
# about the judging system; e.g. which functions are usable or
# possibly system information through compiler directives.
# 0 = Never
# 1 = Only on compilation error(s)
# 2 = Always
SHOW_COMPILE=2

# Show affiliation text or logos (when available) on the scoreboard.
SHOW_AFFILIATIONS=1


#################
# Miscellaneous #
#################

# Number of minutes penalty time for a wrong submission.
PENALTY_TIME=20

# Valid file extensions for different languages (used by submit client/server).
# Languages separated by spaces, language followed by comma separated
# list of supported extensions. First extension is used as key. These
# should match the languages defined in the database.
LANG_EXTS[string]=C,c C++,cpp,cc,c++ Java,java Pascal,pas,p Haskell,hs,lhs Perl,pl Bash,sh

# Location of beep binary. Modify here if you changed the installation
# directory of beep. Set to (e.g.) /bin/true to disable these sounds.
BEEP_CMD[string,eval]=$SYSTEM_ROOT/bin/beep

# Beeping codes for different events (see beep man-page for syntax).
# To disable, set to string "-f 1"; an empty string will produce default beep.
BEEP_ERROR[string]=-l 1000 -d 500 -f 800 -n -l 1000 -d 500 -f 1000 -n -l 1000 -d 500 -f 800 -n -l 1000 -d 500 -f 1000 -n -l 1000 -d 500 -f 800 -n -l 1000 -d 500 -f 1000 -n -l 1000 -d 500 -f 800 -n -l 1000 -d 500 -f 1000 -n -l 1000 -d 500 -f 800 -n -l 1000 -d 500 -f 1000
BEEP_WARNING[string]=-l 1000 -d 500 -f 300 -n -l 1000 -d 500 -f 200 -n -l 1000 -d 500 -f 300 -n -l 1000 -d 500 -f 200
BEEP_SUBMIT[string]=-f 400 -l 100 -n -f 400 -l 70
BEEP_ACCEPT[string]=-f 400 -l 100 -n -f 500 -l 70
BEEP_REJECT[string]=-f 400 -l 100 -n -f 350 -l 70

# Balloons notification.
# How to notify the contest crew that a team has correctly solved a
# problem and should receive a balloon. Specify a command which the
# notification will be piped to or leave empty to disable.
# Example to notify by e-mail:
#BALLOON_CMD[string]=mail -s Balloon_notification domjudge@localhost
# Example to notify by printout:
#BALLOON_CMD[string]=lpr
BALLOON_CMD[string]=


#######################
# Logging & debugging #
#######################

# Syslog facility to use (leave empty to disable), see syslog manpage
# for more information on possible facilities.
SYSLOG=LOG_LOCAL0

# Set DEBUG to 1 to enable verbose output.
# Of course never to be used on live systems!
DEBUG=0
