DOMjudge\MainBundle\Entity\Rejudging:
    type: entity
    table: rejudging
    indexes:
        userid_start:
            columns:
                - userid_start
        userid_finish:
            columns:
                - userid_finish
    id:
        rejudgingid:
            type: integer
            nullable: false
            unsigned: true
            comment: 'Unique ID'
            id: true
            generator:
                strategy: IDENTITY
    fields:
        startTime:
            type: decimal
            nullable: false
            precision: 32
            scale: 9
            comment: 'Time rejudging started'
            column: starttime
        endTime:
            type: decimal
            nullable: true
            precision: 32
            scale: 9
            comment: 'Time rejudging ended, null = still busy'
            column: endtime
        reason:
            type: string
            nullable: false
            length: 255
            fixed: false
            comment: 'Reason to start this rejudge'
        valid:
            type: boolean
            nullable: false
            comment: 'Rejudging is marked as invalid if canceled'
            default: '1'
    manyToOne:
        startedByUser:
            targetEntity: User
            cascade: {  }
            mappedBy: null
            inversedBy: null
            joinColumns:
                userid_start:
                    referencedColumnName: userid
            orphanRemoval: false
        finishedByUser:
            targetEntity: User
            cascade: {  }
            mappedBy: null
            inversedBy: null
            joinColumns:
                userid_finish:
                    referencedColumnName: userid
            orphanRemoval: false
    oneToMany:
        judgings:
            targetEntity: Judging
            mappedBy: rejudging
            inversedBy: rejudging
        submissions:
            targetEntity: Submission
            mappedBy: rejudging
            inversedBy: rejudging
    lifecycleCallbacks: {  }
