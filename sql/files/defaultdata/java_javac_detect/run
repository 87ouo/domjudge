#!/bin/sh

# Java compile wrapper-script for 'compile.sh'.
# See that script for syntax and more info.
#
# This script byte-compiles with the javac compiler and
# generates a shell script to run it with the java interpreter later.
# It autodetects the main class name and optionally renames the source
# file if the class is public.
#
# NOTICE: this compiler script cannot be used with the USE_CHROOT
# configuration option turned on, unless proper preconfiguration of
# the chroot environment has been taken care of!

DEST="$1" ; shift
MEMLIMIT="$1" ; shift
MAINSOURCE=""
MAINCLASS=""

# Stack size in the JVM in KB. Note that this will be deducted from
# the total memory made available for the heap.
MEMSTACK=65536

# Amount of memory reserved for the Java virtual machine in KB. The
# default below is just above the maximum memory usage of current
# versions of the jvm, but might need increasing in some cases.
MEMRESERVED=131072

# Filter out files without .java extension from the list of source
# files. Note that POSIX shell does *not* support arrays, so we store
# them in a single variable that has to be used unquoted. We don't
# need to quote the files since they can only contain "nice" characters.
SOURCES=''
while [ $# -gt 0 ]; do
	if [ "x${1%.java}" != "x$1" ]; then
		SOURCES="$SOURCES $1"
		[ -z "$MAINSOURCE" ] && MAINSOURCE="$1"
	fi
	shift
done
if [ -z "$SOURCES" ]; then
	echo "No source files found with '.java' extension."
	exit 1
fi

# Java needs filename to match main class:
if [ -z "$ENTRY_POINT" ]; then
	echo "Info: no ENTRY_POINT provided, trying to detect main class."
else
	MAINCLASS="$ENTRY_POINT"
fi

TMPFILE=$(mktemp --tmpdir domjudge_javac_output.XXXXXX) || exit 1

# Byte-compile:
javac -encoding UTF-8 -sourcepath . -d . $SOURCES 2> "$TMPFILE"
EXITCODE=$?

if [ -z "$MAINCLASS" ]; then
	echo "Error: Entry point is missing."
	# FIXME: Bring back the code from master - why is this different here?
	# The old code didn't do anything useful at all, because it didn't set MAINCLASS
	exit 1
else
	cat $TMPFILE
	rm -f $TMPFILE
fi

[ "$EXITCODE" -ne 0 ] && exit $EXITCODE

# Check if entry point is valid
COMPILESCRIPTDIR="$(dirname "$0")"
java -cp "$COMPILESCRIPTDIR" DetectMain "$(pwd)" $MAINCLASS
EXITCODE=$?
[ "$EXITCODE" -ne 0 ] && exit $EXITCODE

# Calculate Java program memlimit as MEMLIMIT - max. JVM memory usage:
MEMLIMITJAVA=$((MEMLIMIT - MEMRESERVED))
# FIXME: Use a fixed value of 1920m for World Finals
MEMLIMITJAVA=1966080

# Write executing script:
# Executes java byte-code interpreter with following options
# -Xmx: maximum size of memory allocation pool
# -Xms: initial size of memory, improves runtime stability
# -XX:+UseSerialGC: Serialized garbage collector improves runtime stability
# -Xss${MEMSTACK}k: stack size as configured abve
# -Dfile.encoding=UTF-8: set file encoding to UTF-8
cat > "$DEST" <<EOF
#!/bin/sh
# Generated shell-script to execute java interpreter on source.

# Detect dirname and change dir to prevent class not found errors.
if [ "\${0%/*}" != "\$0" ]; then
	cd "\${0%/*}"
fi

exec java -Dfile.encoding=UTF-8 -XX:+UseSerialGC -Xss64m -Xms${MEMLIMITJAVA}k -Xmx${MEMLIMITJAVA}k '$MAINCLASS' "\$@"
EOF

chmod a+x "$DEST"

exit 0
