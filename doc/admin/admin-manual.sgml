<!doctype linuxdoc system>
<!--
 $Id$

 DOMjudge Administrator's Manual
 This manual is part of the DOMjudge Programming Contest Jury System
 and licenced under the GNU GPL. See README and COPYING for details.

-->
<report>

<title>DOMjudge Administrator's Manual
<author>by the DOMjudge team
<date>$Date$

<abstract>
This document provides information about DOMjudge installation,
configuration and operation for the DOMjudge administrator. A separate
manual is available for teams and for jury members.

Document version: $Rev$
</abstract>

<toc>

<chapt>DOMjudge overview <label id="overview">
<p>

DOMjudge is a system for running a programming contest, like the ACM
regional and world championship programming contests.

This means that teams are on-site and have a fixed time period (mostly
5 hours) and one computer to solve a number of problems (mostly 6-10).
Problems are solved by writing a program in one of the allowed
languages, that reads input according to the problem input
specification and writes the correct, corresponding output.

The judging is done by submitting the source code of the solution to
the jury. There the jury system compiles and runs the program and
compares the program output with the expected output.

This software can be used to handle the submission and judging during
such contests. It also handles feedback to the teams and communication
on problems (clarification requests). It has web interfaces for the
jury, the teams (their submissions and clarification requests) and the
public (scoreboard).

<sect>Features
<p>

A global overview of the features that DOMjudge provides:

<itemize>
<item>Automatic judging with distributed (scalable) judge hosts
<item>Web interface for portability and simplicity
<item>Modular system for plugging in languages/compilers
<item>Detailed jury information (submissions, judgings) and options
      (rejudge, clarifications)
<item>Designed with security in mind
<item>Has been used in live contests
<item>Open Source, Free Software
</itemize>


<sect>Requirements
<p>

This is a (rough) list of the requirements for DOMjudge.

<itemize>
<item>At least one machine running Linux, with local root access
<item>Apache web server with PHP (4.3.2 or newer) and PHP-command line interface
<item>MySQL database server version 4.1.0 or newer
<item>Compilers for the languages you want to support
</itemize>

If you want to use the command line submit client (next to / instead
of the web submit client):

<itemize>
<item>A shared file system with the team computers (e.g. NFS)
<item>SSH/SCP
</itemize>

A <ref id="install_config:requirements" name="detailed list of requirements">
is contained in the <ref id="install_config" name="Installation and Configuration">
chapter.

<sect>Copyright and licencing
<p>

DOMjudge was developed by Thijs Kinkhorst, Peter van de Werken and
Jaap Eldering at Study Association <htmlurl name="A-Eskwadraat"
url="http://www.a-eskwadraat.nl/">, <htmlurl name="Utrecht University"
url="http://www.uu.nl/">, The Netherlands.

It is Copyright (c) 2004 - 2008 by The DOMjudge Developers.

DOMjudge, including its documentation, is free software; you can redistribute
it and/or modify it under the terms of the <url name="GNU General Public License"
url="http://www.gnu.org/copyleft/gpl.html"> as published by the Free Software
Foundation; either version 2, or (at your option) any later version. See the
file COPYING.

This software is partly based on code by other people. These
acknowledgements are made in the respective files, but we would like
to name them here too:

<itemize>
<item> beep.c is made by Johnathan Nightingale.
<item> bash is included from the Debian `bash-static' (i386) package
(copyright Free Software Foundation).
<item> mkstemps.h and basename.h are modified versions from the
GNU libiberty library (copyright Free Software Foundation).
<item> lib.database.php by Jeroen van Wolffelaar et al.
<item> submit.cc and submitdaemon.cc are based on submit.pl and
submitdaemon.pl by Eelco Dolstra.
<item> runguard.c was originally based on timeout from The
Coroner's Toolkit by Wietse Venema.
<item> The DOMjudge logo is based on the NKP 2004 logo made by
Erik van Sebille.
</itemize>

A binary version of the bash shell (statically compiled)
is distributed with DOMjudge. This program is copyright by the Free
Software Foundation and distributed under the GPL version 2 or later.
Sources can be downloaded from:
<url url="http://domjudge.sourceforge.net/bash-sources/">

<sect>Contact
<p>
The DOMjudge homepage can be found at:
<htmlurl name="http://domjudge.sourceforge.net/"
url="http://domjudge.sourceforge.net/">

The authors can be reached through the development mailing list:
<htmlurl name="domjudge-devel@lists.a-eskwadraat.nl"
url="mailto:domjudge-devel@lists.a-eskwadraat.nl">. See
<htmlurl name="the list information page"
url="http://lists.a-eskwadraat.nl/mailman/listinfo/domjudge-devel">
for details.


<chapt>Installation and configuration <label id="install_config">
<p>
This chapter details a fresh installation of DOMjudge. The first
section is a Quick Installation Reference, but that should only be
used by those already acquainted with the system. A detailed guide
follows after that.


<sect>Quick installation
<p>
<em>Note:</em> this is not a replacement for the thorough installation
instructions below, but more a cheat-sheet for those who've already
installed DOMjudge before and need a few hints. When in doubt, always
consult the full installation instruction.


External software:
<itemize>
<item> Install the MySQL-server, set a root password for it and
       make it accessible from all judgehosts.
<item> Install Apache, PHP and (recommended) phpMyAdmin.
<item> Make sure PHP works for the web server and command line scripts.
<item> Install necessary compilers on the judgehosts.
<item> See also <ref id="install_config:apt-getinstall"
       name="an example command line for Debian GNU/Linux">.
</itemize>

DOMjudge:
<itemize>
<item> Configure the system:
       <tt>$EDITOR etc/global.cfg; make config</tt>
<item> Make sure that all of the DOMjudge stuff is in the directory
       set as <tt>SYSTEM_ROOT</tt>, and from that directory:
       <tt>make ; make install</tt>
<item> Add <tt>etc/apache.conf</tt> to your Apache configuration, edit
       it, reload web server.
<item> Check that the web interface works (/team, /public and /jury)
       and check that the jury interface is password protected.
<item> Add useful contest data through the jury web interface or with
       phpMyAdmin.
<item> Run the config checker in the jury web interface.
<item> Start the command line submit daemon, when using this
       functionality: <tt>cd submit; ./submitdaemon</tt>
<item> Next, setup the judgehosts on separate hosts:
  <itemize>
	 <!-- NOTE: update this, then also update the copy of this under chapter 2.14 -->
  <item> RedHat: <tt>useradd -d /nonexistent -g nobody -M -n -s /bin/false domjudge-run</tt><newline>
         Debian: <tt>useradd -d /nonexistent -g nogroup -s /bin/false domjudge-run</tt><newline>
         (check specific options of useradd, since these vary per system)
  <item> Start the judge daemon: <tt>cd judge; ./judgedaemon</tt>
  </itemize>

<item> It should be done by now, submit the sources from the
       test-sources/ directory and compare their results with what
       they claim should happen: <tt>make check</tt> and check all
       submissions in the jury web interface.

<item>Optionally:
  <itemize>
  <item> Install the submit client on the team workstations.
  <item> Generate one-time passwords for all the teams in the web interface.
  <item> Further tighten the security of the system, e.g. by applying
         firewall rules.
  <item> Start the balloon notification daemon: <tt>cd bin; ./balloons</tt>
  <item> Setup the Java chroot environment to use Sun Java with chroot:<newline>
         <tt>bin/make_chroot.sh &lt;installdir&gt; &lt;architecture&gt;</tt><newline>
         <tt>$EDITOR judge/chroot-startstop.sh</tt><newline>
         enable the <tt>chroot-startstop.sh</tt> script in <tt>etc/global.cfg</tt>
         and add the following lines to <tt>/etc/sudoers</tt>:<newline><tt>
	 <!-- NOTE: update this, then also update the copy of this under chapter 2.14 -->
         domjudge ALL=(root) NOPASSWD: /bin/mount -n -t proc --bind /proc proc<newline>
         domjudge ALL=(root) NOPASSWD: /bin/umount /*/proc<newline>
         domjudge ALL=(root) NOPASSWD: /bin/mount --bind CHROOTORIGDIR/*<newline>
         domjudge ALL=(root) NOPASSWD: /bin/umount JUDGEDIR/*</tt>
  <item> Install the PEAR Text_Highlighter class for source syntax highlighting.
  </itemize>
</itemize>


<sect>Concepts
<p>

This manual assumes you are aware of some of the concepts used within
DOMjudge. Here's an overview.

DOMjudge has three different kinds of hosts:
<itemize>
<item> Team computer: workstation for a team, where they develop their
       solutions and from which they submit them to the jury system.
       The only part of DOMjudge that runs here is the optional
       command line submit client; the rest happens via the web
       interface.
<item> DOMjudge server: a host that receives the submissions, runs the
       database and serves the web pages. This host will run Apache,
       MySQL and perhaps the submitdaemon. Optionally some of
       these tasks can be further split out to separate machines, but
       that's normally not necessary.
<item> Judgehosts: a number of hosts, at least one, that will retrieve
       submitted solutions from the main jury system, compile and run
       them and send the results back to the jury system. Since this
       is computationally intensive, there should ideally be at least
       a couple of these. They will run the judgedaemon from DOMjudge.
       For security and performance reasons it is highly recommended not
       to use the main jury system as a judgehost.
</itemize>

Note that the judges (persons) are not required and not recommended to
work on any of the DOMjudge server or judgehosts, as they access the
system via the jury web interface.

<sect>Requirements
<label id="install_config:requirements">
<p>

<sect1>System requirements
<p>

The requirements for the deployment of this jury-system are:

<itemize>
<item> A TCP/IP network which connects all jury and team computers.
       Extra network security which restricts internet access and
       access to other services (ssh, mail, talk, etc..) is advisable,
       but not provided by this software, see <ref
       id="security:external" name="Security: external security"> for
       more details. TCP/IP networking is used in a few different ways:
  <itemize>
  <item> The judgehosts use TCP/IP connections to connect to the
         MySQL database on port 3306.
  <item> HTTP traffic from teams, the public and jury to the web server,
         port 80 or 443.
  <item> The `submit' command line client connects to the submitserver
         via a TCP connection on a configurable port.
  </itemize>
       Each team computer needs to have a unique IP address from the
       view of the jury system.

<item> (Local) root access on the jury-computers (preferably also on
       the shared home directory) for installing some programs
       setuid-root and (un)mounting the proc file system. See <ref
       id="security:rootprivs" name="Security: root privileges"> for
       more details.

<item> For using the command line submit program, team accounts which
       are accessible via SSH on the jury computers (a SSH public key
       of the jury account should be installed on all team accounts to
       provide public-key access). This can be circumvented by
       providing access by other means, see below under <ref
       id="install_config:submissionmethods" name="Submission methods">
       or the file <tt>submit/submit_copy.sh</tt> for more details.
</itemize>

<sect1>Software requirements
<p>

<itemize>
<item> gcc and g++ with standard libraries

<item> make

<item> For every supported programming language a compiler is needed;
       preferably one that can generate statically linked stand-alone
       executables.

<item> Apache web server with support for PHP &gt;= 4.3.2 and the mysql
       extension for PHP. We recommend PHP 5 since DOMjudge on PHP 4 gets
       a lot less testing nowadays; we also recommend the posix extension
       for extra debugging information.

<item> MySQL &gt;= 4.1.x database and client software

<item> PHP &gt;= 4.3.2, located in <tt>/usr/bin/php</tt> (command line
       interface), also with the mysql extension.

<item> Bash &gt;= 2, located in <tt>/bin/bash</tt>

<item> A POSIX compliant shell in <tt>/bin/sh</tt> (e.g. bash or ash)

<item> A statically compiled POSIX shell, located in
       <tt>SYSTEM_ROOT/bin/sh-static</tt> (bash 3 is included for
       Linux IA32)

<item> glibc &gt;= 2.1

<item> A lot of standard (GNU) programs, a probably incomplete list:
       hostname, date, dirname, basename, touch, chmod, cp, mv, cat,
       grep, diff, wc, mkdir, mkfifo, mount, sleep, head, tail, pgrep

<item> Apache htpasswd

<item> <htmlurl name="xsltproc" url="http://xmlsoft.org/XSLT/index.html"> 
       from the GNOME XSLT library package.

<item> linuxdoc to build the documentation and LaTeX to build
       the PDF-documentation

</itemize>

The following items are optional, but may be required to use certain
functionality.

<itemize>

<item> sudo (to use a chroot judging environment with Sun Java)

<item> OpenSSH/SCP or compatible (for using the command line
       submit program)

<item> wget/curl and unzip (for downloading LaTeX packages
       for documentation)

<item> phpMyAdmin, to be able to access the database in an emergency
       or for data import/export

<item> An NTP daemon (for keeping the clocks between jury
       system and judgehosts in sync)

<item> <htmlurl name="libcurl" url="http://curl.haxx.se/libcurl/">~
       (to use the command line submit client with the web interface)

<item> <htmlurl name="PEAR Text_Highlighter class"
        url="http://pear.php.net/package/Text_Highlighter/">~
       (to use syntax highlighting in the Show Source section of the
        jury interface)
</itemize>

<sect1>Requirements for team workstations
<p>

In the most basic setup the team workstations only need (next to the tools needed
for program development) a web browser. The web interface fully works with any
known browser, with the exception of notification of new clarifications in the
menu bar. That can be updated without reloading the page by using AJAX. This is
supported by any reasonably current browser with JavaScript enabled.


<label id="install_config:apt-getinstall">
<sect1>Debian installation command
<p>

For your convenience, the following command will install needed software as mentioned
above when using Debian GNU/Linux, or one of its derivate distributions. Most systems
will have the bulk of these packages installed already.

<code>
apt-get install gcc g++ make libcurl3-dev sudo mysql-server ntp \
	apache2 php5 php5-cli libapache2-mod-php5 php5-mysql \
	hostname coreutils procps grep diff mount sharutils \
	openssh-server openssh-client bash-static phpmyadmin xsltproc \
	wget linuxdoc-tools unzip tetex-bin tetex-extra transfig
</code>

This is for Debian 4.0 "Etch". For Debian 5.0 "Lenny",
replace <tt/tetex-bin/ and <tt/tetex-extra/
with <tt/texlive-latex-recommended/ and <tt/texlive-latex-extra/,
and <tt/libcurl3-dev/ with <tt/libcurl4-gnutls-dev/.

On a judgehost, the following should be sufficient. The last line shows some example
compilers to install for C, C++, Java (GNU), Java (Sun), Haskell and Pascal; change
the list as appropriate.

<code>
apt-get install make sudo php5-cli php5-mysql ntp xsltproc \
	hostname coreutils procps grep diff mount bash-static \
	gcc g++ gcj sun-java5-jdk ghc fp-compiler
</code>

<sect>File locations
<p>

There are three different directory trees which must be set up and
configured. The root paths of these directory trees should be set in
the main config file. Directories in uppercase are configuration
variables, which can be set to different locations (even within
different roots).

<descrip>
<tag><tt>SYSTEM_ROOT</tt></tag>
	This must be set to the directory tree where the DOMjudge sources
	are installed. The required compiled programs will be installed in
	place within this directory tree. All programs needed for the
	judging system are located here alongside some extra utilities and
	the configuration of the system.

<tag><tt>OUTPUT_ROOT</tt></tag>
	Placed here are all submission files, log files and temporary
	files, made while testing submissions. The following directories
	should be present within <tt>OUTPUT_ROOT</tt>:
	<descrip>
	<tag><tt>LOGDIR</tt></tag>
		contains all log files.
	<tag><tt>INCOMINGDIR</tt></tag>
		contains temporary submission files from the
		command line client, being submitted or where a
		submission error has occurred. 
	<tag><tt>SUBMITDIR</tt></tag>
		(optionally) contains all correctly submitted files: as backup
		only, the database is the authoritative source.
	<tag><tt>JUDGEDIR</tt></tag>
		place where submissions are tested, each in its own
		subdirectory. The system needs root access to this
		directory! (for chroot and mounting of proc-fs).
	</descrip>
</descrip>


<sect>Global configuration: <tt>global.cfg</tt>
<p>

Configuration of the judge system is mostly done by editing the global
configuration file in <tt>SYSTEM_ROOT/etc/global.cfg</tt>. This file
contains the configuration data for all programs within the system. To
implement configuration changes, these settings should be converted to
the different language-specific configuration-files, needed by
different parts of the system. This is done by running <tt>make
config</tt> in the <tt>SYSTEM_ROOT</tt> directory. After that, also
all C/C++ programs should be rebuilt (if necessary) to implement these
changes!

The global configuration file has a ini-file like syntax, with some
extensions to make it more flexible and to be able to correctly
convert variables to all specific configuration files. See comments
there for more information. Also all configuration options are
documented there.


<sect>Configuration of languages
<p>

Configuration of the compilers of the supported languages should be
done separately. For each supported language a shell-script named
<tt>compile_&lt;lang&gt;.sh</tt> should be made and placed in
<tt>SYSTEM_ROOT/judge</tt>, where &lt;lang&gt; is the ID of the
language as specified in the database. For more information, see for
example <tt>compile_c.sh</tt> and <tt>test_solution.sh</tt> in
<tt>SYSTEM_ROOT/judge</tt> for syntax.

Interpreted languages and non-statically linked binaries can in
principle also be used, but then the option <tt>USE_CHROOT</tt> should
be disabled (or all dependencies be added to the chroot environment).
Interpreted languages do not generate an executable and in principle
do not need a compilation step. However, to be able to use interpreted
languages (also Sun's Java), a script must be generated during the
compilation step, which will function as the executable: the script
must run the interpreter on the source. See <tt>compile_perl.sh</tt>
and <tt>compile_java_javac.sh</tt> in <tt>SYSTEM_ROOT/judge</tt> for
examples.

DOMjudge supports the use of Sun Java within a chroot environment. For
this, a chroot environment which includes the Sun Java libraries must
first be built. This can be accomplished with the included script
<tt>bin/make_chroot.sh</tt>: run this as root and pass as arguments
the target directory to build the chroot environment in and as second
argument the target machine architecture. Start the script without
arguments for usage information. See also sections
<ref id="install_config:judgehost" name="Installation of a judgehost">
and <ref id="problems:java-chroot" name="Problems: Java & chroot">.

<sect>Configuration of special run and compare programs
<p>

To allow for problems that do not fit within the standard scheme of
fixed input and/or output, DOMjudge has the possibility to change the
way submissions are run and checked for correctness.

The back-end script (<tt>test_solution.sh</tt>) that handles the
compilation, running and checking of submissions, calls separate
programs for running and comparison of the results. These can be
specialised and adapted to the requirements per problem. For this, one
has to create programs or scripts <tt>run_&lt;some-tag&gt;</tt> and/or
<tt>compare_&lt;some-tag&gt;</tt> in the <tt>SYSTEM_ROOT/judge</tt>
directory (see <tt>run</tt> and <tt>compare</tt> for examples and
usage information). Then one must specify this
<tt>&lt;some-tag&gt;</tt> in the special_run and/or special_compare
fields of the problem entry in the MySQL database (empty means that
the default script should be used).

The shipped <tt>test_solution.sh</tt> has support for enabling
<tt>presentation-error</tt> to be returned as a judging result. This
is counted as an incorrect submission. For this to work, you need to
uncomment the marked lines near the bottom of this script. The
validator used should also support returning presentation error
results; the shipped <tt>compare</tt> supports this and reports
<tt>presentation-error</tt> when the output only differs in whitespace
from the reference output. The script <tt>compare_program.sh</tt> does
not support presentation error results.

<sect>Other configuration issues
<p>

There are a few more places where some configuration of the system can
be made. These are sometimes needed in non-standard environments.
<itemize>
<item> In <tt>SYSTEM_ROOT/Makefile.global</tt> the defines
       <tt>ROOTCMD</tt> and <tt>SUIDINSTALLDIR</tt> can be modified to
       use a different method of root-access in the install process
       and specify a different place for set-uid root binaries
       respectively.
<item> In <tt>SYSTEM_ROOT/bin/make_chroot.sh</tt> some changes to
       variables can be made, most notably <tt>DEBMIRROR</tt> to
       select a Debian mirror site near you.
<item> In <tt>SYSTEM_ROOT/sql/Makefile</tt>, you can set
       <tt>MYSQL_UPGR_USER</tt> to a different user than root for
       database upgrades (upgrading is not well tested!).
<item> <tt>SYSTEM_ROOT/submit/submit_copy.sh</tt> and
       <tt>SYSTEM_ROOT/judge/chroot-startstop.sh</tt> can be modified
       to suit your local environment. See comments in those files for
       more information.
</itemize>

<sect>Submission methods <label id="install_config:submissionmethods">
<p>

DOMjudge supports two submission methods: via the command line submit
program and via the web interface. From experience, both methods have
users that prefer the one above the other.

The command line submit method does place some requirements on the
network environment however. It needs a shared file system or other
means for the jury to access the files on the team accounts. Site
specific adaptations can be made in <tt>submit/submit_copy.sh</tt>.

When command line submit is disabled in the configuration, the
command line submit client/daemon will still be built, but the submit
client will now default to try to connect to the websubmit interface
using <tt>libcurl</tt>. For this, the <tt>libcurl</tt> library
development files must be available at compile time (the submit client
is statically linked to libcurl to avoid runtime dependencies on
libcurl).

Although the command line submit daemon is thus not strictly
necessary, it does add an advantage: it is more secure than the
web interface because it uses a `callback' to authenticate the team
(instead of IP address authentication). Furthermore, it allows for
automatic team IP address configuration with the configuration option
<tt>STRICTIPCHECK=0</tt>, which removes the hassle of either
preconfiguring team--IP mappings or handing passwords to the teams for
their first authentication.

The figure below is a graphical representation of the flow of a
submission. Arrows with filled lines indicate the flow of the
submission file, while dot-dash lines indicate flow of metadata about
the submission. Each line where no protocol of data transfer is given,
are just file system operations. Squares are programs and rounded
squares are storage locations.

<figure loc="h">
<eps file="submitflow.eps">
<img src="submitflow.png">
<caption>Submission flow diagram.
</figure>

The database is the authoritative version for submission sources;
file system storage is available for historic reasons, as an easy way
to access the source files and as backup. The program
<tt>bin/restore_sources2db</tt> is available to recover the submission
table in the database from these files. The command line daemon will
automatically store sources on the file system; the web server needs
write permissions on <tt>SUBMITDIR</tt> and ignores file system storage
if these permissions are not set.

<sect>Database installation
<p>

DOMjudge uses a MySQL database server for storage of contest status
information.

The database structure and needed privileges are included in MySQL
dump files in the sql subdirectory. The default database name is
`domjudge'. This can be changed manually in the configuration and SQL
files, but we recommend not to do this, as this is not well tested.

Installation of the database can be done with <tt>make install</tt>.
For this, you need an installed and configured MySQL server and root
access to it. The install script also inserts some default/example
data into the domjudge database.

The domjudge database contains a number of tables, some of which need
to be manually filled with data before the contest can be run. See
the <ref id="contestsetup:database" name="database section of Configuration">
for details.

<sect1>Fine tuning settings
<p>

It may be desirable or even necessary to fine tune some MySQL default settings:

<itemize>
<item><tt>max_connections</tt>: The default 100 is too low, because of the
connection caching by Apache threads. 1000 is more appropriate.
<item><tt>skip-networking</tt> or <tt>bind-address</tt>: By default MySQL
only listens on a local socket, but judgehosts need to connect remotely to
it. When enabling remote connections, you may want to limit it to only the
IP's of judgehosts in the MySQL user configuration (or with firewall rules).
<item>Root password: MySQL does not have a password for the root user
by default. It's very desirable to set one.
</itemize>


<sect1>MySQL table types
<p>

DOMjudge has optional transaction support built in: if your MySQL
table type supports transactions, DOMjudge will make use of it to
make it even more robust where that would be otherwise impossible.
The <em>InnoDB</em> table type supports transactions; the default
<em>MyISAM</em> does not; however, the latter is claimed to have a
higher performance.

When maximising performance is required, you can
consider to use the <em>Memory</em> (formerly <em>Heap</em>) table
for the scoreboard_public and scoreboard_jury tables. They will be
lost in case of a full crash, but can be recalculated from the jury
interface.

<sect1>Setting up replication or backups
<p>
The MySQL server is the central place of information storage for
DOMjudge. Think well about what to do if the MySQL
host fails or loses your data.

A very robust solution is to set up a replicating MySQL server on
another host. This will be a hot copy of all data up to the second,
and can take over immediately in the event of failure. The MySQL manual
has more information about setting this up.

Alternatively, you can make regular backups of your data to another host,
for example with <tt>mysqldump</tt>, or use a RAID based system.

Replication can also be used to improve performance, by directing all
select-queries to one or more replicated slave servers, while updates
will still be done to the master. This is not supported out of the box,
and will require making changes to the DOMjudge source.

<sect>Web server configuration
<p>

For the web interface, you need to have a web server (e.g. Apache)
installed on the jury system and made sure that PHP correctly works
with it. Refer to the documentation of your web server and PHP for
details.

If you want to upload large testcases in the jury web interface,
it may be necessary to raise some PHP limits or you'll get
"memory exhausted" errors. Make sure that the parameters
<tt>memory_limit</tt>, <tt>upload_max_filesize</tt> and <tt>post_max_size</tt>
in <tt>php.ini</tt> are all well above the size of your largest testcase.

To configure the web server for DOMjudge, use the Apache configuration
snippet from <tt>etc/apache.conf</tt>. Some values are prefilled from
global.cfg but may need to be changed. Reload the web server for the
changes to take effect.

See also section <ref id="security:webprivs" name="Security: webserver
privileges">.

<sect>Logging &amp; debugging
<p>

All DOMjudge daemons and web interface scripts support logging and
debugging in a uniform manner via functions in <tt>lib.error.*</tt>.
There are three ways in which information is logged:
<itemize>
<item>Directly to <tt>stderr</tt> for daemons or to the web page for
      web interface scripts (only on serious issues).
<item>To a log file set by the variable <tt>LOGFILE</tt>, which is set
      in each program (unsetting this variable disables this method).
<item>To syslog. This can be configured via the <tt>SYSLOG</tt>
      configuration variable in the global config. This option gives
	  the flexibility of syslog, such as remote logging.
	  See the syslog(daemon) documentation for more information.
</itemize>
Each script also defines a default threshold level for messages to be
logged to stderr (<tt>VERBOSE</tt>: defaults to <tt>LOG_INFO</tt> in
daemons and <tt>LOG_ERROR</tt> in the web interface) and for
log file/syslog (<tt>LOGLEVEL</tt>: defaults to <tt>LOG_DEBUG</tt>).

In case of problems, it is advisable to check the logs for clues.
Extra debugging information can be obtained by setting the config
option <tt>DEBUG</tt> to a bitwise-or of the available
<tt>DEBUG_*</tt> flags in <tt>global.cfg</tt>, to e.g. generate extra
SQL query and timing information in the web interface.

<sect>Building and installing
<p>

After you have configured the system, you can start installing the
(few) components that need building and installing. This part is also
interactive, because input of system and MySQL root passwords is
needed.

In the following, all calls to <tt>make</tt> should in principle be
done from the <tt>SYSTEM_ROOT</tt> directory: all relevant targets are
defined in the main `Makefile' there and it will call subdirectory
makefiles.

The system can be installed with the command <tt>make install</tt> in
the <tt>SYSTEM_ROOT</tt> directory. This will first run <tt>make
config</tt> and <tt>make build</tt> if necessary. This command is
interactive: it will ask for a few different passwords:
<itemize>
<item> a password which will be set on the jury web interface.
<item> the system root password to install some programs set-uid root.
<item> the MySQL database root password to install the DOMjudge database.
</itemize>
It does also automatically generate and set passwords for the team and
public web interface: these are only used internally in the system and
are best left untouched.

There are some files/directories that have to be readable/writable by
the web server. These are:
<itemize>
<item> <tt>SYSTEM_ROOT/etc/passwords.php</tt> must be readable by the
       web server, but (best) not world readable.
<item> <tt>SUBMITDIR</tt> can optionally be set writable for the
       web server, to store websubmitted sources there (next to the
	   database), see <ref id="install_config:submissionmethods"
	   name="submission methods"> for more information.
</itemize>

See also section <ref id="security:webprivs" name="Security: webserver
privileges">.

Should installation not succeed and re-installation be necessary, then
you can clean all built files with <tt>make clean</tt>. <tt>make
distclean</tt> will additionally also remove all traces of DOMjudge
from the MySQL database, which is needed if you want to reinstall the
database!

<sect>Installation of a judgehost<label id="install_config:judgehost">
<p>

On a judgehost the installation procedure is a bit different and
actually not really polished yet. <tt>global.cfg</tt> can be taken
from the main server, but a webserver and MySQL database
need not be set up. After configuring DOMjudge, run <tt>make
config</tt> and <tt>make build</tt>, but <em>not</em> <tt>make
install</tt> as this would also try to install the DOMjudge database.
Instead the following steps have to be performed:
<itemize>
<item> copy <tt>etc/passwords.php</tt> from the main server,
<item> run <tt>make -C bin install</tt>,
<item> run <tt>bin/make_directories.sh install</tt>.
</itemize>

For running solution programs under a non-privileged user, a user has
to be added to the system(s) that act as judgehost. This user does not
need a home-directory or password, so the following command would
suffice to add a user `domjudge-run' with minimal privileges.

<!-- NOTE: update this, then also update the copy of this under chapter 2.1 -->
On RedHat:
<verb>useradd -d /nonexistent -g nobody -M -n -s /bin/false domjudge-run</verb>
On Debian:
<verb>useradd -d /nonexistent -g nogroup -s /bin/false domjudge-run</verb>

For other systems check the specifics of your useradd command.
This user must also be configured as the user under which programs run
in <tt>SYSTEM_ROOT/etc/global.cfg</tt>.

If you use the default <tt>judge/chroot-startstop.sh</tt> script, then
the following lines must be added to <tt>/etc/sudoers</tt>:
<!-- NOTE: update this, then also update the copy of this under chapter 2.1 -->
<verb>
domjudge ALL=(root) NOPASSWD: /bin/mount -n -t proc --bind /proc proc
domjudge ALL=(root) NOPASSWD: /bin/umount /*/proc
domjudge ALL=(root) NOPASSWD: /bin/mount --bind CHROOTORIGDIR/*
domjudge ALL=(root) NOPASSWD: /bin/umount JUDGEDIR/*
</verb>
Here the user <tt>domjudge</tt> must be replaced by the user you
intend to run the judgedaemon as, <tt>CHROOTORIGDIR</tt> by the path
the chroot environment was installed to and <tt>JUDGEDIR</tt> by the
value of this variable as in <tt>global.cfg</tt>.

<sect>Building the submit client under Windows/Cygwin
<p>

The submit client can also be built under Windows when the Cygwin
environment is installed. First the Cygwin <url name="setup.exe"
url="http://cygwin.com/setup.exe"> program must be downloaded and
installed with GCC, curl-devel and maybe some more packages included.
Furthermore, for submitting to the command line submitdaemon (next to
the web interface), you need to have Windows XP and the cygwin-base
package must be (re-)installed from the mirror
<url url="http://cygwin.win6.jp/cygwin-ipv6/"> for support of the
complete <tt>netdb.h</tt> headers (as this is currently not supported
in the standard Cygwin tree yet).

<p>
When Cygwin is correctly installed with all necessary development
tools, the submit binary can be created (after configuration) by
running <tt>make submit.exe</tt> in the <tt>SYSTEM_ROOT/submit</tt>
directory.

<sect>Optional features
<p>

<sect1>Source code syntax highlighting
<p>

To support coloured display of submitted source code in the jury
interface, the <url name="PEAR" url="http://pear.php.net">
<url name="Text_Highlighter class" url="http://pear.php.net/package/Text_Highlighter/">
needs to be available in your PHP include path. This means that
you can install this system wide with the PEAR-provided tools,
like this: <tt>pear install Text_Highlighter</tt>.

Alternatively you can download the source code from the
Text_Highlighter website and unpack that under the <tt>www/jury</tt>
directory. Rename the resulting <tt>Text_Highlighter-x.y.z</tt>
directory to just <tt>Text</tt>.

<sect1>NTP time synchronisation
<p>

We advise to install an NTP-daemon (Network Time Protocol) to make
sure the time between jury computer and judgehost (and team computers)
is in sync.

<sect1>The plugin web interface
<p>

Next to the public, team and jury web interfaces, DOMjudge also
provides a <em>plugin</em> web interface. This web interface is still in
development so subject to change. The interface provides contest data
from DOMjudge in XML format and is meant to provide external programs
(plugins) with data on the contest. This allows for all kinds of
extensions beyond the core functionality of DOMjudge such as providing
a fancy scoreboard with more statistics, aggregation of scoreboard
data for a final presentation during the prize ceremony.

As we are still thinking about possible uses and thus the data to be
provided, the exact specification of this interface may change. Also,
we are especially interested in feedback and ideas.

There are currently two data-sets provided within the <tt>plugin</tt>
subdirectory of the DOMjudge web interface, both in XML format:
<descrip>
<tag><tt>scoreboard.php</tt></tag>
	This page provides a representation of the scoreboard.
	Additionally it includes legend tables for problems,
	languages, affiliations and team categories. It does not
	accept any arguments.
<tag><tt>event.php</tt></tag>
	This page provides a representation of events that happened
	during the contest, including submissions, judgings, contest
	state changes and general clarifications. This page accepts
	two arguments <tt>fromid</tt> and <tt>toid</tt> to limit the
	output to events with event ID in that range.
</descrip>
See these pages or the accompanying <tt>xsd</tt>-files for the exact
structure.

<sect>Upgrading
<p>

Upgrading DOMjudge to a newer version is not (yet) well supported. In
case you want to upgrade, be aware of the following problems.

There might be database layout incompatibility problems. The first
place to check for this is the ChangeLog. Simple additions to the
structure can be integrated by running <tt>make upgrade</tt> in
<tt>SYSTEM_ROOT/sql</tt> of the new installation. This will (in
principle, no guarantees) preserve the data in the database.

Upgrading is probably best done by installing the new version in a
separate place and transferring the configuration settings from the
old version.


<chapt>Setting up a contest <label id="contestsetup">
<p>

After installation is successful, you want to run your contest!
Configuring DOMjudge to run a contest (or a number of them, in
sequence) involves the following steps:

<itemize>
<item> Configure the contest data;
<item> Set up authentication for teams;
<item> Supply in- and output testdata;
<item> Check that everything works.
</itemize>

<sect>Configure the contest data
<label id="contestsetup:database">
<p>

DOMjudge stores and retrieves most of its data from the MySQL
database. Some information must be filled in beforehand, other tables
will be populated by DOMjudge.

You can use the jury web interface to add, edit and delete most types
of data described below. It's advised to keep a version of phpMyAdmin
handy in case of emergencies, or for general database operations like
import and export.

This section describes the meaning of each table and what you need to
put into it. Tables marked with an `x' are the ones you have to
configure with contest data before running a contest (via the jury web
interface or e.g. with phpMyAdmin), the other tables are used
automatically by the software:
<tabular ca="cll">
 |clarification    |Clarification requests/replies are stored here.@
x|contest          |Contest definitions with start/end time.@
x|judgehost        |Computers (hostnames) that function as judgehosts.@
 |judging          |Judgings of submissions.@
x|language         |Definition of allowed submission languages.@
x|problem          |Definition of problems (name, corresponding contest, etc.).@
 |submission       |Submissions of solutions to problems.@
x|team             |Definition of teams.@
x|team&lowbar;affiliation |Definition of institutions a team can be affiliated with.@
x|team&lowbar;category    |Different category groups teams can be put in.@
x|testcase         |Definition of testdata for each problem.@
 |scoreboard&lowbar;jury  |Cache of the scoreboards for public/teams and for the jury@
 |scoreboard&lowbar;public|separately, because of possibility of score freezing.
</tabular>

Now follows a longer description (including fields) per table that has
to be filled manually. 

<descrip>
<tag>contest</tag>
The contests that the software will run. E.g. a test session and the
live contest.

<tt>cid</tt> is the reference ID and <tt>contestname</tt> is a
descriptive name used in the interface.

<tt>activatetime</tt>, <tt>starttime</tt> and <tt>endtime</tt>
are required fields and specify when this contest is active and
open for submissions. Optional <tt>freezetime</tt> and
<tt>unfreezetime</tt> control scoreboard freezing. For a
detailed treating of these, see section <ref
id="contestsetup:milestones" name="Contest milestones">.

<tag>judgehost</tag>
List here the hosts that will be judging the submissions.
<tt>hostname</tt> is the (short) hostname of a judge computer.
<tt>active</tt> indicates whether this host should judge incoming
submissions. <tt>polltime</tt> is an internally used variable to
detect whether a judgedaemon is running on the host.

<tag>language</tag>
Programming languages in which to accept and judge submissions.
<tt>langid</tt> is a string of maximum length 8, which references the
language. This reference is also used to call the correct compile
script (<tt>SYSTEM_ROOT/judge/compile_c.sh</tt>, etc.), so when adding
a new language, check that these match.

<tt>name</tt> is the displayed name of the language;
<tt>extension</tt> the internally used extension for that language,
which has to match the first extension as listed in the global
configuration file.

<tt>allow_submit</tt> determines whether teams can submit
using this language; <tt>allow_judge</tt> determines whether
judgehosts will judge submissions for this problem. This can for
example be set to no to temporarily hold judging when a problem occurs
with the judging of a specific language; after resolution of the
problem this can be set to yes again.

<tt>time_factor</tt> is the relative factor by which the timelimit is
multiplied for solutions in this language. For example Java is/was
known to be structurally slower than C/C++.

<tag>problem</tag>
This table contains the problem definitions. <tt>probid</tt> is the
reference ID, <tt>cid</tt> is the contest ID this problem is (only)
defined for: a problem cannot be used in multiple contests.
<tt>name</tt> is the full name (description) of the problem.

<tt>allow_submit</tt> determines whether teams can submit
solutions for this problem. Non-submittable problems are also not
displayed on the scoreboard. This can be used to define spare
problems, which can then be added to the contest quickly;
<tt>allow_judge</tt> determines whether judgehosts will judge
submissions for this problem. See also the explanation for language.

<tt>timelimit</tt> is the timelimit in seconds
within which solutions for this problem have to run (taking into
account <tt>time_factor</tt> per language).

<tt>special_run</tt> if not empty defines a custom run program
<tt>run_&lt;special_run&gt;</tt> to run compiled submissions for
this problem and <tt>special_compare</tt> if not empty defines a
custom compare program <tt>compare_&lt;special_compare&gt;</tt> to
compare output for this problem.

The <tt>color</tt> tag can be filled with a CSS colour specification
to associate with this problem; see also section <ref id="scoreboard:colours"
name="Scoreboard: colours">.

<tag>team</tag>
Table of teams: <tt>login</tt> is the account/login-name of the team
(which is referenced to in other tables as <tt>teamid</tt>) and
<tt>name</tt> the displayed name of the team. <tt>categoryid</tt> is
the ID of the category the team is in; <tt>affilid</tt> is the
affiliation ID of the team.

<tt>ipaddress</tt> is the IP-address of the team. This is used to
automatically identify the team in the web interface and to check
submission origin. A value of <tt>NULL</tt> results in the team being
unable to submit or view its team page, unless they first authenticate
via password or command line submission. <tt>passwd</tt> is a
MD5-hash of a one-time password teams can use to authenticate and
register their IP address. It can be set under Administrator Functions:
Generate Passwords.

The <tt>hostname</tt> field is automatically filled in when team data
is added or changed based on a reverse DNS lookup of the IP address.
If this cache becomes inaccurate for some reason, it can be refreshed
under the Administrator functions on the main page.

<tt>members</tt> are the names of the team members, separated by
newlines and <tt>room</tt> is the room the team is located, both for
display only; <tt>comments</tt> can be filled with arbitrary useful
information and is only visible to the jury.
The timestamp <tt>teampage_first_visited</tt> indicates when/whether a
team visited its team web interface.

<tag>team_affiliation</tag>
<tt>affilid</tt> is the reference ID and <tt>name</tt> the name of the
institution. <tt>country</tt> should be the 2 character 
<htmlurl name="ISO 3166-1 alpha-2 abbreviation"
url="http://www.iso.org/iso/country_codes/iso_3166_code_lists/english_country_names_and_code_elements.htm">
of the country and <tt>comments</tt> is a free form field
that is displayed in the jury interface.

Both for the country and the affiliation, a logo can be displayed on
the scoreboard. For this to work, the <tt>affilid</tt> must match a
logo picture located in
<tt>SYSTEM_ROOT/www/images/affiliations/&lt;affilid&gt;.png</tt> and
<tt>country</tt> must match a (flag) picture in
<tt>SYSTEM_ROOT/www/images/countries/&lt;country&gt;.png</tt>. All
country flags are present there, named with their 2-character ISO
codes. See also <tt>SYSTEM_ROOT/www/images/countries/README</tt>. If
either file is not present the respective ID string will be printed
instead.

<tag>team_category</tag>
<tt>categoryid</tt> is the reference ID and <tt>name</tt> is a string:
the name of the category. <tt>sortorder</tt> is the order at which
this group must be sorted in the scoreboard, where a higher number
sorts lower and equal sort depending on score.

The <tt>color</tt> is again a CSS colour specification used to
discern different categories easily. See also section <ref
id="scoreboard:colours" name="Scoreboard: colours">.

The <tt>visible</tt> flag determines whether teams in this category
are displayed on the public/team scoreboard. This feature can be used
to remove teams from the public scoreboard by assigning them to a
separate, invisible category.

<tag>testcase</tag>
The testcase table contains testdata for each problem; <tt>id</tt> is
a unique identifier, <tt>input</tt> and <tt>output</tt> contain the
testcase input/output and <tt>md5sum_input</tt>,
<tt>md5sum_output</tt> their respective md5 hashes to check for
up-to-date-ness of cached versions by the judgehosts. <tt>probid</tt>
is the corresponding problem and <tt>description</tt> an optional
description for this testcase.
See also <ref id="contestsetup:testdata" name="providing testdata">.

</descrip>

<sect>Contest milestones<label id="contestsetup:milestones">
<p>

The <tt>contest</tt> table specifies timestamps for each contest
that mark specific milestones in the course of the contest.

The triplet <em>activatetime</em>, <em>starttime</em> and <em>endtime</em>
define when the contest runs and are required fields (activatetime and
starttime may be equal).

activatetime is the moment when a contest first becomes
visible to the public and teams (potentially replacing a previous contest
that was displayed before). Nothing can be submitted yet and the
problem set is not revealed. Clarifications can be viewed and sent.

At starttime, the scoreboard is displayed and submissions are accepted.
At endtime the contest stops. New incoming submissions will be stored
but not processed; unjudged submissions received before endtime will
still be judged.

<em>freezetime</em> and <em>unfreezetime</em> control scoreboard
freezing. freezetime is the time after which the public and team
scoreboard are not updated anymore (frozen). This is meant to make the
last stages of the contest more thrilling, because no-one knows who has
won. Leaving them empty disables this feature. When using this feature,
unfreezetime can be set to automatically `unfreeze' the scoreboard at
that time. For a more elaborate description, see also section <ref
id="scoreboard:freeze" name="Scoreboard: freezing and defrosting">.

The scoreboard, results and clarifications will remain to be displayed
to team and public after a contest, until an activatetime of a later
contest passes.

All events happen at the first moment of the defined time. That is:
for a contest with starttime "12:00:00" and endtime "17:00:00", the
first submission will be accepted at 12:00:00 and the last one at
16:59:59.

The following ordering must always hold: activatetime &lt;=
starttime &lt; (freezetime &lt;=) endtime (&lt;= unfreezetime).
No two contests may have overlap: there's always at most one active
contest at any time.



<sect>Team authentication
<p>

The jury system needs to know which team it is dealing with.

The IP-address of a workstation is the primary means of
authentication. The system assumes that someone coming from a specific
IP is the team with that IP listed in the team table. When a team
browses to the web interface, this is checked and the appropriate team
page is presented. The submitclient also checks this IP for the origin
of a submission.

Authentication within the command line submitclient is fortified by
the following process. When a client connects, it does not send the
submission file, but only a reference to a randomised and not publicly
visible file. This file is then copied from server side with the
submit_copy script. This makes it impossible for teams to spoof a
submission for a different team: the server `calls back' the team the
submitter identified himself as and checks for existence of the
advertised file. Because filenames are randomised and invisible
(within the <tt>$HOME/.submit</tt> directory by default), it is also
impossible for someone to guess another team's filename and submit it
for them.

There are three possible ways of configuring team IP-addresses.

<sect1>Supply it beforehand
<p>

Before the contest starts, when entering teams into the database, add
the IP that each team will have to that team's entry. When the teams
arrive, everything will work directly and without further
configuration (except when teams switch workplaces). If possible, this
is the recommended modus operandi, because it's the least hassle just
before and during the contest.

<sect1>Use one-time usernames and passwords
<p>

Supply the teams with a password with which to authenticate.
Beforehand, generate passwords for each team in the jury interface.
When the test session (or contest) starts and a team connects to the
web interface and have an unknown IP, they will be prompted for
username and password. Once supplied, the IP is stored and the
password is not needed anymore.
	   
This is also a secure option, but requires a bit more hassle from the
teams, and maybe from the organisers who have to distribute pieces of
paper.
   
<em>Note:</em> the web interface will only allow a team to
authenticate themselves once. If an IP is set, a next authentication
will be refused (to avoid trouble with lingering passwords). In order
to fully re-authenticate a team, the IP address needs to be unset. You
might also want to generate a new password for this specific team.
Furthermore, a team must explicitly connect to the team interface,
because with an unknown IP, the root DOMjudge website will redirect to
the public interface.

<sect1>Set IP upon first submission
<p>

Have DOMjudge configure the IP upon first submission with the command
line submit client. To activate this, option <tt>STRICTIPCHECK</tt>
should be set to 0. In that case, we (optionally) start out
without IP's (and the web interface will not be accessible), but as
soon as a team connects with the command line client, they are
authenticated by correctly submitting a file and the IP is registered
and everything works as normal.
   
The connect can happen during the test session, so during the real
contest everything is fully available. This is also a secure way of
authenticating teams, which requires no passwords or IP configuration,
but teams must submit via the command line submit client to the
command line daemon before they can access their teampage.


<sect>Providing testdata
<label id="contestsetup:testdata">
<p>
Testdata is used to judge the problems: when a submission run is given the
input testdata, the resulting output is compared to the reference output data.
If they match exactly, the problem is judged to be correct.

The database has a separate table named testcase, which can be manipulated
from the web interface. Under a problem, click on the testcase link. There
the files can be uploaded. The judger caches a copy based on MD5 sum, so if
you need to make changes later, re-upload the data in the web interface and
it will automatically be picked up.

For problems with a special compare script, things are a bit
different: testdata should still be provided as above, but the
correctness depends on the output of the custom compare script. Please
check the documentation in
<tt>SYSTEM_ROOT/judge/compare_program.sh</tt> when using this feature.


<sect>Start the daemons
<p>

Once everything is configured, you can start the daemons.
They all run as a normal user on the system. The needed root privileges
are gained by the setuid-root programs only when required.

<itemize>
<item> One or more judgedaemons, one on each judgehost;
<item> Optionally the submitdaemon on the jury system;
<item> Optionally the balloon notification daemon.
</itemize>

<sect>Check that everything works
<p>

If the daemons have started without any problems, you've come a long
way! Now to check that you're ready for a contest.

First, go to the Jury Interface:
<tt>http://www.your-domjudge-location/jury</tt>. Look under all the
menu items to see whether the displayed data looks sane. Use the
config-checker under `Admin Functions',
and <tt>make check</tt> under the <tt>etc/</tt> directory
for some additional sanity checks on your configuration.

Go to a team workstation and see if you can access the team page and
if you can submit solutions.

Next, it is time to submit some test solutions. If you have the default
Hello World problem enabled, you can submit some of the example sources
from under the <tt>doc/</tt> directory. They should give `CORRECT'.

You can also try some (or all) of the sources under
<tt>test-sources</tt>. Use <tt>make check</tt> to submit a variety of
tests; this should work when the submit client is available and the
default example problems are in the active contest. Check the source
files for the expected answer of each test. There's also <tt>make
stress-test</tt>, but be warned that these tests might crash a
judgedaemon.

When all this worked, you're quite ready for a contest. Or at least,
the practice session of a contest.

<sect>Testing jury solutions
<p>

Before running a real contest, you and/or the jury will want to test
the jury's reference solutions on the system.

There is no special feature for testing there solutions under
DOMjudge. The simplest approach is to submit these solutions as a
special team. This method requires a few steps and some carefulness to
prevent a possible information leak of the problemset. It is assumed
that you have completely configured the system and contest and that
all testdata is provided. To submit the jury solutions the following
steps have to be taken:
<itemize>
<item> change the contest time to make the contest currently active;
<item> setup a special team at a local computer;
<item> submit the jury solutions as that team;
<item> check that all solutions are judged as expected in the jury
       interface;
<item> revert the contest to the original times.
</itemize>
Note that while the contest time is changed to the current time,
anyone might be able to access the public or team web-interface:
there's not too much there, but on the scoreboard the number of
problems and their titles can be read. To prevent this information
leak, one could disconnect the DOMjudge server, judgehosts and the
computer used for submitting from the rest of the network.

Furthermore, you should make sure that the team you submit the
solutions as, is in a category which is set to invisible, so that it
doesn't show up on the public and team scoreboard. The sample team
"DOMjudge" could be used, as it is in the "Organisation" category,
which is not visible by default.


<chapt>Team Workstations<label id="teamworkstations">
<p>

Here's a quick checklist for configuring the team workstations. Of course,
when hosting many teams, it makes sense to generate a preconfigured account that
has these features and can be distributed over the workstations.

<enum>
<item> The central tool team interaction with DOMjudge is the web browser.
  <itemize>
  <item> If possible, set the Home Page to <tt>your.domjudge.location/team/</tt>
  <item> Go to the team page and check if this team is correctly identified.
  <item> If using https and a self signed certificate, add this certificate
  to the browser certificate list to prevent annoying dialogs.
  </itemize>
<item> Make sure compilers for the supported languages are installed and working.
<item> Provide teams with the command line submit client and check that it works.
<item> Make the sample in- and output data from the problem set available.
<item> Add your SSH key to their authorized_keys file, so you can always access
their account for wiping, emergencies and to make the submit command line client
work when it doesn't use the cURL interface.
<item> Check that internet access is blocked.
</enum>

<chapt>Web interface<label id="webinterface">
<p>

The web interface is the main point of interaction with the system.
Here you can view submissions coming in, control judging,
view the standings and edit data.

<sect>Jury and Administrator view
<p>

The jury interface has two possible views: one for jury members,
and one for DOMjudge administrators. The second view is the same as
the jury view, but with more features added. Which to show is decided
by using the HTTP authentication login used to access the web interface;
you can list which HTTP user is an admin in <tt>etc/passwords.php</tt>.

This separation is handy as a matter of security (jury members cannot
(accidentally) modify things that shouldn't be) and clarity (jury members
are not confused / distracted by options they don't need).

Options offered to administrators only:
<itemize>
<item>Adding and editing any contest data
<item>Managing team passwords
<item>The config checker
<item>Refreshing the scoreboard & hostname caches
<item>Rejudge 'correct' submissions
<item>Restart 'pending' judgings
</itemize>
Furthermore, some quick link menu items might differ according to
usefulness for jury or admins.

<sect>The scoreboard <label id="scoreboard">
<p>

The scoreboard is the canonical overview for anyone interested in the
contest, be it jury, teams or the general public. It deserves to get a
section of its own.

<sect1>Colours and sorting <label id="scoreboard:colours">
<p>

Each problem can be associated with a specific colour, e.g. the colour
of the corresponding balloon that is handed out. DOMjudge can display
this colour on the scoreboard, if you fill in the `color' attribute in
the `problem' table; set it to a <htmlurl name="valid CSS colour value"
url="http://www.w3.org/TR/REC-CSS1#color-units"> (e.g. `green'
or `#ff0000', although a name is preferred for displaying colour
names).

It's possible to have different categories of teams participating,
this is controlled through the `team_category' table. Each category
has its own background colour in the scoreboard. This colour can be
set with the `color' attribute to a valid CSS colour value.

If you wish, you can also define a sortorder in the category table.
This is the first field that the scoreboard is sorted on. If you want
regular teams to be sorted first, but after them you want to sort both
spectator- and business teams equally, you define `0' for the regular
category and `1' for the other categories. To completely remove a
category from the public (but not the jury) scoreboard, the category
visible flag can be set to `0'.


<sect1>Starting and ending
<p>

The displayed scoreboard will always be that of the most recently
started contest. The scoreboard is never displayed for a contest that
still has to start. In other words, the scores will become visible on
the first second of a contest start time.

When the contest ends, the scores will remain to be displayed, until a
next contest starts.

<sect1>Freezing and defrosting <label id="scoreboard:freeze">
<p>

DOMjudge has the option to `freeze' the public- and team scoreboards
at some point during the contest. This means that scores are no longer
updated and remain to be displayed as they were at the time of the
freeze. This is often done to keep the last hour interesting for all.
The scoreboard freeze time can be set with the `freezetime'
attribute in the contest table.

The scoreboard freezing works by looking at the time a submission is
made. Therefore it's possible that submissions from (just) before the
freezetime but judged after it can still cause updates to the public
scoreboard. A rejudging during the freeze may also cause such updates.

If you do not set any freeze time, this option does nothing. If you
set it, the public- and team scoreboards will not be updated anymore
once this time has arrived. The jury will however still see the actual
scoreboard.

Once the contest is over, the scores are not automatically `unfrozen'.
This is done to keep them secret until e.g. the prize ceremony. You
can release the final scores to team- and public interfaces when the
time is right. You can do this either by setting a predefined
`unfreezetime' in the contest table, or you push the `unfreeze scores
now' button in the jury web interface, under contests.

<sect1>Clickability
<p>

Almost every cell is clickable in the jury interface and gives
detailed information relevant to that cell. This is (of course) not
available in the team and public scoreboards.

<sect1>Caching
<p>

The scoreboard is not recalculated on every page load, but rather
cached in the database. It should be safe for repeated reloads from
many clients. In exceptional situations (should never occur in normal
operation, e.g. a bug in DOMjudge), the cache may become inaccurate.
The jury administrator interface contains an option to recalculate a
fresh version of the entire scoreboard. You should use this option
only when actually necessary, since it puts quite a load on the
database.


<sect1>Balloons
<p>

Although not strictly part of the scoreboard, in many contests
balloons are handed out to teams that solve a particular problem.
DOMjudge can help in this process: a balloons notification daemon is
available that will notify the runners when a new balloon needs to be
handed out.

Alternatively you can use a web based tool in the jury interface,
reachable from the main page, where each balloon has to be checked off
by the person handing it out.

For the daemon, use the BALLOON_CMD option to define how notifications
are sent. Examples are to mail to a specific mailbox or to send
prints to a printer. When configured, start <tt>bin/balloons.php</tt>
and notification will start.

Notifications will continue even after the scoreboard is frozen,
although a warning is printed on the notification. Stop the balloons
daemon when you don't want balloons to be handed out anymore.


<chapt>Security <label id="security">
<p>

This judging system was developed with security as one of the main
goals in mind. To implement this rigorously in various aspects
(restricting team access to others and the internet, restricting
access to the submitted programs on the jury computers, etc...)
requires root privileges to different parts of the whole contest
environment. Also, security measures might depend on the environment.
Therefore we have decided not to implement security measures which are
not directly related to the judging system itself. We do have some
suggestions on how you can setup external security.

<sect>Considerations
<p>

Security considerations for a programming contest are a bit different
from those in normal conditions: normally users only have to be
protected from deliberately harming each other. During a contest we
also have to restrict users from cooperatively communicating,
accessing restricted resources (like the internet) and restrict user
programs running on jury computers.

We expect that chances are small that people are trying to cheat
during a programming contest: you have to hack the system and make use
of that within very limited time. And you have to not get caught and
disqualified afterwards. Therefore passive security measures of
warning people of the consequences and only check (or probe) things
will probably be enough.

However we wanted the system to be as secure as possible within
reason. Furthermore this software is open source, so users can try to
find weak spots before the contest.

<sect>Internal security <label id="security:internal">
<p>

Internal security of the system relies on users not being able to get
to any vital data (jury input/output and users' solutions). Data is
stored in two places: files on the jury account and in the SQL
database. Files should be protected by preventing permission to the
relevant directories.

Database access is protected by passwords. The default permissions
allow connections from <em>all</em> hosts, so make sure you restrict
this appropriately or choose strong enough passwords.

<em>Note:</em> database passwords are stored in
<tt>SYSTEM_ROOT/etc/passwords.php</tt>. This file has to be
non-readable to teams, but has to be readable to the web server to let
the jury web interface work. A solution is to make it readable to a
special group the web server runs as.

Secondly, the files submitted should not be interceptable by other
teams (even though that, if these would be sent clear-text, a team
would normally have to be root/administrator on their computer to
intercept this). By default this is accomplished by transferring these
files with ssh (and even locally on the jury-computers). See
<tt>SYSTEM_ROOT/submit/submit_copy.sh</tt> for more information.

Teams should not be able to fake the identity of another team. This is
prevented in the submission system, by making use of temporary files
in a world non-readable directory of the team account: during
submission, the file is copied there with some random part and this
file will be copied by the jury. Another team cannot guess filenames
there, so trying to send as a different team would only result in a
copying error. During submission, the IP address is also checked. The
team web interface relies on authentication by IP address only: this
has the advantage for teams that they do not have to fill in yet
another user/password combination. Only if teams are able to spoof
their IP (for which they normally need root/administrator privileges),
then they would be able to view other teams' submission info (not
their code) and clarifications. As this gives a team little advantage,
we think that this suffices.

<em>Note:</em> When enabling the websubmit feature (on by default),
teams can also send in submissions with authentication purely based on
IP. This means that care has to be taken e.g. that teams cannot simply
login onto one another's computer and spoof their identity.

The jury web interface is protected by HTTP Authentication. By default
the <tt>domjudge_jury</tt> user will be given full access. You can choose
to add more users to the htpasswd file. In etc/passwords.php you can provide
a list of <em>admin users</em>. Most data-modification functions will then
be restricted to only users in this list.


<sect>Root privileges <label id="security:rootprivs">
<p>

A difficult issue is the securing of submitted programs run by the
jury. We do not have any control over these sources and do not want to
rely on checking them manually or filtering on things like system
calls (which can be obscured and are different per language).

Therefore we decided to tackle this issue by running these programs in
a environment as restrictive as possible. This is done by setting up a
minimal chroot environment. For this, root privileges on the judging
computers and statically compiled programs are needed. By also
limiting all kinds of system resources (memory, processes, time,
unprivileged user) we protect the system from programs which try to
hack or could crash the system.  However, a chroot environment does
not restrict network access, so there lies a possible security risk
that has to be handled separately.

<sect>File system privileges <label id="security:fileprivs">
<p>

Of course you must make sure that the file system privileges are set
such that there's no unauthorised access to sensitive data, like
submitted solutions or passwords. This is quite system dependent. At
least the <tt>OUTPUT_ROOT</tt> should not be readable by other users
than DOMjudge.

<sect1>Permissions for the web server <label id="security:webprivs">
<p>

Make sure that the web server serving the DOMjudge web interface pages
has correct permissions to the <tt>SYSTEM_ROOT/{www,lib,etc}</tt>
directory trees. The <tt>www</tt> and <tt>lib</tt> trees can safely
set to be readable and accessible. Care should be taken with the
<tt>etc</tt> dir: <tt>config.php</tt> and <tt>passwords.php</tt>
should be readable, but <tt>passwords.php</tt> should best not be
readable by anyone else. This can be done for example by setting the
<tt>SYSTEM_ROOT/etc</tt> directory to owner:group &lt;DOMjudge
account&gt;:&lt;Web server group&gt; and permissions
<tt>drwxr-x---</tt>, denying users other than yourself and the
web server group access to the configuration and password files.

If you want the web server to also store incoming submission sources on
the file system (next to the database), then <tt>SUBMITDIR</tt> must be
writable for the web server, see also <ref
id="install_config:submissionmethods" name="submission methods">.

You should take care not to serve any files over the web that
are not under the DOMjudge 'www/' directory, because they might
contain sensitive data (e.g. those under sql/). DOMjudge comes
with .htaccess files that try to prevent this, but double-check
that it's not accessible.

<sect>External security <label id="security:external">
<p>

The following security issues are <em>not</em> handled by DOMjudge,
but left to the administrator to set up.

Network traffic between team- and jury-computers and the internet
should be limited to what is allowed. Possible ways of enforcing this
might be: monitor traffic, modify firewall rules on team computers or
(what we implemented with great satisfaction) put all team computers
behind a firewalling router.

Solutions are run within a restricted (chroot) environment on the
judge computers. This however does not restrict network access, so a
team could try to send in a solution that tries to send input testdata
back to them, access the internet, etc... A solution to this problem
is to disallow all network traffic for the test user on the judge
computers. On Linux with kernel 2.4 and higher, this can be
accomplished by modifying the iptables, adding a rule like:

<verb>
iptables -I OUTPUT -o &lt;network_interface&gt; -m owner --uid-owner &lt;testuser_uid&gt; -j REJECT
</verb>


<chapt>Common problems and their solutions <label id="problems">
<p>


<sect>Java compilers and the chroot <label id="problems:java-chroot">
<p>

Java is difficult to deal with in an automatic way. It is probably
most preferable to use Sun Java, because that's the version
contestants will be used to. The GNU Compiler for Java (GCJ) is easier
to deal with but may lack some features.

With the default configuration, submitted programs are run within a minimal
chroot environment. For this the programs have to be statically
linked, because they do not have access to shared libraries.

For most languages compilers support this, but for Java, this is a bit
problematic. The Sun Java compiler `javac' is not a real compiler:
a bytecode interpreter `java' is needed to run the binaries and thus
this cannot simply run in a chroot environment.

There are some options to support Java as a language:
<enum>
<item> One can disable the chroot environment in
       <tt>etc/global.cfg</tt> by setting <tt>USE_CHROOT=0</tt>.
       Disabling the chroot environment removes this extra layer of
       security against submissions that attempt to
       cheat, but it is a simple solution to getting Java to work.
<item> Next, one can build a bigger chroot environment which contains
       all necessary ingredients to let Sun Java work within it.
       DOMjudge supports this with some manual setup.

       First of all, a chroot tree with Java support must be created.
       The script bin/make_chroot.sh creates one from Debian GNU/Linux
       sources; run that script without arguments for basic usage
       information. Next, edit the script <tt>judge/chroot-startstop.sh</tt>
       and adapt it to work with your local system and uncomment the
       script in <tt>etc/global.cfg</tt>.
<item> As an alternative the <tt>gcj</tt> compiler from GNU can be
       used instead of Sun's version. This one generates true machine
       code and can link statically. However a few function calls
       cannot be linked statically (see `GCJ compiler warnings' in
       this FAQ). Secondly, the static library <tt>libgcj.a</tt>
       doesn't seem to be included in all GNU/Linux distributions: at
       least not in RedHat Enterprise 4.
</enum>

<sect>The Sun Java virtual machine (jvm) and memory limits
<p>

DOMjudge imposes memory limits on submitted solutions. These limits
are imposed before the compiled submissions are started. On the other
hand, the Sun jvm is started via a compile-time generated script which
is run as a wrapper around the program. This means that the memory
limits imposed by DOMjudge are for the jvm and the running program
within it. As the jvm uses approximately 200MB, this reduces the limit
by this significant amount. See <tt>judge/compile_java_javac.sh</tt>
for the implementation details.

<sect>GCJ compiler warnings
<p>

When using the GNU GCJ compiler for compiling Java sources, it can
give a whole lot of warning messages of the form
<verb>
/usr/lib/gcc-lib/i386-linux/3.2.3/libgcj.a(gc_dlopen.o)(.text+0xbc):
In function `GC_dlopen': Using 'dlopen' in statically linked
applications requires at runtime the shared libraries from the glibc
version used for linking
</verb>

These are generated because you are trying to compile statically
linked sources, but some functions can not be static, e.g. the
`dlopen' function above. These are <em>warnings</em> and can be safely
ignored, because under normal programming contest conditions people
are not allowed to use these functions anyway (and they are not
accessible within the chroot-ed environment the program is run in).

To filter these warnings, take a look at
<tt>judge/compile_java_gcjmod.sh</tt> and replace or symlink
<tt>judge/compile_java.sh</tt> by/to this file.

<sect>Error: `submit_copy.sh failed with exitcode XX'
<p>

This error can have various causes. First of all: check the
<tt>submit.log</tt> file for more complete error messages.

Assuming the default configuration where submit_copy.sh uses `scp', we
have found that shell initialisation scripts might contain statements
which generate errors: scp runs the user's default shell when copying
submission files and when the shell dies (e.g. because of not having a
terminal), the copying fails.

Another cause might be that you do not have automatic access to the
team's account (e.g. using ssh keys).


<appendix>

<chapt>DOMjudge and the ICPC validator interface standard <label id="validator">
<p>
DOMjudge supports the ICPC validator interface standard, which can be
found at: <url url="http://www.ecs.csus.edu/pc2/doc/valistandard.html">

The invocation code (<tt>judge/test_solution.h</tt>) adheres to the
invocation interface. It passes as a 5th optional parameter to the
validator program the filename in which it expects a difference output
between the program and jury output (parameters 2 and 3 respectively).

Parsing of the result XML file (in the result interface) is done with
the `xsltproc' program, which is part of the
<url name="GNOME libxslt package" url="http://www.xmlsoft.org/XSLT/">.
<em>The exitcode of the validator program should be zero, otherwise
an internal error is generated.</em>

DOMjudge currently has two validator scripts: <tt>judge/compare</tt>
and <tt>judge/compare_program.sh</tt>. The first does a compare with a
plain diff, the second script calls an external program for checking
(e.g. <tt>judge/check_float</tt> for comparison of floating point
results). When passed a 5th parameter, this is interpreted as a
filename to which these scripts will write a comparison of the program
and jury output. Both scripts also generate XML compliant output,
which is written to the result file specified in parameter 4 and fully
complies with the validator standard.

</report>
